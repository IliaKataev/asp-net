@page "/tasks"
@using ToDoList.Services
@inject IJSRuntime JS

<div class="tasks-header-add">
    <h3 class="tasks-header">Список задач</h3>

    <a class="btn btn-primary" href="/add-task">Добавить задачу</a>
</div>

<div class="sort-panel">
    <div class="sorting">
        <label for="sortOption">Сортировка:</label>
        <select id="sortOption" @onchange="OnSortChanged">
            <option value="">По умолчанию</option>
            <option value="priority">По важности</option>
            <option value="date">По дате</option>
            <option value="title">По алфавиту</option>
        </select>
    </div>
    <button class="btn-primary" @onclick="InvertSortOrder">Инверсия</button>
</div>

<div class="filter-panel">
    <label>Фильтры:</label>

    <select @onchange="OnStatusChanged">
        <option value="">Все</option>
        <option value="true">Выполненные</option>
        <option value="false">Невыполненные</option>
    </select>

    <select @onchange="OnPriorityChanged">
        <option value="">Все</option>
        <option value="High">Высокий</option>
        <option value="Medium">Средний</option>
        <option value="Low">Низкий</option>
    </select>

    <input type="date" @onchange="OnDateChange" />

    <form @onsubmit="OnQuerySubmit">
        <input placeholder="..." @bind="searchQuery" @bind:event="oninput"/>
    </form>

    <button @onclick="ClearFilters">Сбросить фильтры</button>
</div>



@if(TaskService.FilteredTasks.Count == 0)
{
    <p>Нет задач</p>
}
else
{
    <ul class="p-3 task-list">
        @foreach (var task in TaskService.FilteredTasks)
        {
            <li class="task-item" style="color:@GetPriorityColor(task.Priority);">
                <div class="main-text">
                    <div class="item-text">
                        <span style="text-decoration:@(task.IsCompleted ? "line-through" : "none")"><strong>@task.Title</strong> -  @task.DueDate.ToShortDateString()</span>
                    </div>

                    <InputCheckbox @bind-Value="task.IsCompleted" @onchange="() => SaveTasksAsync()" class="item-check"/>

                </div>
                @if (task.Tag != null)
                {
                    <label>
                        <span style="color:@task.Tag.Color;" class="item-tag">
                            @task.Tag.Name
                        </span>
                    </label>
                }
                <div class="main-buttons">
                    <a class="btn btn-secondary button-task-list" href="/task/@task.Id">Подробнее</a>
                    <a class="btn btn-secondary button-task-list" href="/edit-task/@task.Id">Редактировать</a>
                    <button class="btn btn-secondary button-task-list" @onclick="() => DeleteTask(task.Id)">Удалить</button>
                </div>                
            </li>
        }
    </ul>
}


@code {
    private string searchQuery = "";


    private string selectedFilter = "";


    [Inject]
    private TaskService TaskService { get; set; }

    [Inject] private HttpClient Http { get; set; }


    protected override async Task OnInitializedAsync()
    {
       
        await TaskService.LoadAsync(Http, JS);
    }

    public async Task SaveTasksAsync()
    {
        await TaskService.SaveAsync(JS);
    }

    private async Task DeleteTask(Guid id)
    {
        TaskService.DeleteAsync(id);
        await TaskService.SaveAsync(JS);
    }


    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "green",
            TaskPriority.Medium => "goldenrod",
            TaskPriority.High => "red",
            _ => "black"
        };
    }

    // Сортировка-------------------------------------------------------------



    private void OnSortChanged(ChangeEventArgs e)
    {
        TaskService.SetSortOption(e.Value.ToString());
        TaskService.ApplySorting();
    }

    private void InvertSortOrder()
    {
        TaskService.ToggleSortOrder();
        TaskService.ApplyFilter();
    }


    // Фильтр-------------------------------------------------------------


    private void OnStatusChanged(ChangeEventArgs e)
    {
        TaskService.SetStatusFilter(e.Value?.ToString() ?? "");
        TaskService.ApplyFilter();
    }

    private void OnPriorityChanged(ChangeEventArgs e)
    {
        TaskService.SetPriorityFilter(e.Value?.ToString() ?? "");
        TaskService.ApplyFilter();
    }

    private void OnDateChange(ChangeEventArgs e)
    {
        if(DateTime.TryParse(e.Value?.ToString(), out var parsedDate))
        {
            TaskService.SetDateFilter(parsedDate);
        }
        else
        {
            TaskService.SetDateFilter(null);
        }

        TaskService.ApplyFilter();
    }

    private void OnQuerySubmit()
    {
        TaskService.SetSearchQuery(searchQuery);
        TaskService.ApplyFilter();
    }


    private void ClearFilters()
    {
        selectedFilter = "";
        TaskService.SetStatusFilter("");
        TaskService.SetPriorityFilter("");
        TaskService.SetDateFilter(null);
        TaskService.SetSearchQuery("");
        TaskService.SetSortOption("");
        //TaskService.ToggleSortOrder();
        TaskService.ApplyFilter();
        
    }


}
