@page "/tasks"
@inject IJSRuntime JS

<div class="tasks-header-add">
    <h3 class="tasks-header">Список задач</h3>

    <a class="btn btn-primary" href="/add-task">Добавить задачу</a>
</div>



@if(tasks.Count == 0)
{
    <p>Нет задач</p>
}
else
{
    <ul class="p-3 task-list">
        @foreach (var task in tasks)
        {
            <li class="task-item" style="color:@GetPriorityColor(task.Priority);">
                <div class="main-text">
                    <div>
                        <strong style="text-decoration:@(task.IsCompleted ? "line-through" : "none")">@task.Title</strong> -  @task.DueDate.ToShortDateString()
                    </div>
                    <InputCheckbox @bind-Value="task.IsCompleted" @onchange="() => SaveTasksAsync()" />
                </div>
               <div class="main-buttons">
                    <a class="btn btn-secondary button-task-list" href="/task/@task.Id">Подробнее</a>
                    <a class="btn btn-secondary button-task-list" href="/edit-task/@task.Id">Редактировать</a>
                    <button class="btn btn-secondary button-task-list" @onclick="() => DeleteTask(task.Id)">Удалить</button>
               </div>
                <!--отдельный компонент для одной задачи-->
                
            </li>
        }
    </ul>
}


@code {
    public static List<TaskModel> tasks = new();

    // public static IJSRuntime JSRuntime { get; set; }

    // [Inject] public IJSRuntime InjectedJS
    // {
    //     get => JS;
    //     set
    //     {
    //         JS = value;
    //         JSRuntime = value;
    //     }
    // }

    [Inject] private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var localData = await JS.InvokeAsync<string>("localStorage.getItem", "tasks");

        if (!string.IsNullOrEmpty(localData) && localData != "[]")
        {
            tasks = System.Text.Json.JsonSerializer.Deserialize<List<TaskModel>>(localData);
        }
        else
        {
            var json = await Http.GetStringAsync("sample-data/tasks.json");
            tasks = System.Text.Json.JsonSerializer.Deserialize<List<TaskModel>>(json);

            await SaveTasksAsync();
        }
    }

    public async Task SaveTasksAsync()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(tasks);
        await JS.InvokeVoidAsync("localStorage.setItem", "tasks", json);
    }

    private async Task DeleteTask(Guid id)
    {
        var taskToDelete = tasks.FirstOrDefault(t => t.Id == id);
        if(taskToDelete != null)
        {
            tasks.Remove(taskToDelete);
            await SaveTasksAsync();
        }
    }

    // private async Task ResetToJson()
    // {
    //     var json = await Http.GetStringAsync("sample-data/tasks.json");
    //     tasks = System.Text.Json.JsonSerializer.Deserialize<List<TaskModel>>(json);

    //     await SaveTasksAsync();
    // }

    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "green",
            TaskPriority.Medium => "goldenrod",
            TaskPriority.High => "red",
            _ => "black"
        };
    }

}
