@page "/edit-task/{Id:guid}"
@using ToDoList.Model;
@inject IJSRuntime JS;
@using ToDoList.Services
@inject NavigationManager NV;

@if(taskToEdit == null)
{
    <p>Задача не найдена</p>
}
else
{
    <EditForm Model="@taskToEdit" OnValidSubmit="HandleValidEdit">
        <DataAnnotationsValidator />
        <!--<ValidationSummary />-->
        <div id ="edit-form">
            <div class="task-item">
                <label>Заголовок:</label>
                <InputText @bind-Value="taskToEdit.Title" class="form-input" />
                <ValidationMessage For="@(() => taskToEdit.Title)" />
            </div>

            <div class="task-item">
                <label>Срок:</label>
                <InputDate @bind-Value="taskToEdit.DueDate" class="form-input" />
                <ValidationMessage For="@(() => taskToEdit.DueDate)" />
            </div>
            <div class="task-item">
                <label>Приоритет:</label>
                <InputSelect @bind-Value="taskToEdit.Priority" class="form-input">
                    @foreach (var p in Enum.GetValues<TaskPriority>())
                    {
                        <option value="@p">@p</option>
                    }
                </InputSelect>
            </div>
            <div class="task-item">
                <label>Категория</label>
                <InputSelect @bind-Value="taskToEdit.Tag" class="form-select">
                    <option value="">Выберите:</option>
                    <option value="Работа">Работа</option>
                    <option value="Учеба">Учеба</option>
                    <option value="Личное">Личное</option>
                </InputSelect>
                <!--button type="button" class="button-task-list" @onclick="">Добавить тег</button-->
            </div>

            <button class="button-task-list" type="submit">Сохранить задачу</button>
            <a class="btn btn-primary button-task-list" style="background-color: #3B3B1A;" href="/tasks">Отмена</a>
        </div>
        
    </EditForm>

    
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    [Inject]
    private TaskService TaskService { get; set; }
    [Inject]
    private HttpClient http { get; set; }
    private TaskModel taskToEdit;



    protected override async Task OnInitializedAsync()
    {
        await TaskService.LoadAsync(http, JS);
        taskToEdit = TaskService.AllTasks.FirstOrDefault(t => t.Id == Id);
    }

    private async Task HandleValidEdit()
    {
        await TaskService.SaveAsync(JS);
        TaskService.ApplyFilter();

        NV.NavigateTo("/tasks");
    }

}
