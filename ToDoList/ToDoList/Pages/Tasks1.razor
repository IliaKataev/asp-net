@page "/tasks1"
@inject IJSRuntime JS

<div class="tasks-header-add">
    <h3 class="tasks-header">Список задач</h3>

    <a class="btn btn-primary" href="/add-task">Добавить задачу</a>
</div>

<div class="sort-panel">
    <div class="sorting">
        <label for="sortOption">Сортировка:</label>
        <select id="sortOption" @onchange="OnSortChanged">
            <option value="default">По умолчанию</option>
            <option value="priority">По важности</option>
            <option value="date">По дате</option>
            <option value="title">По алфавиту</option>
        </select>
    </div>
    <button class="btn-primary" @onclick="InvertSortOrder">Инверсия</button>
</div>

<div class="filter-panel">
    <label>Фильтры:</label>

    <select @onchange="OnStatusChanged">
        <option value="">Все</option>
        <option value="true">Выполненные</option>
        <option value="false">Невыполненные</option>
    </select>

    <select @onchange="OnPriorityChanged">
        <option value="">Все</option>
        <option value="High">Высокий</option>
        <option value="Medium">Средний</option>
        <option value="Low">Низкий</option>
    </select>

    <input type="date" @onchange="OnDateChange" />

    <form @onsubmit="OnQuerySubmit">
        <input placeholder="..." @bind="searchQuery" @bind:event="oninput" />
    </form>




    <button @onclick="ClearFilters">Сбросить фильтры</button>

</div>



@if (tasks.Count == 0)
{
    <p>Нет задач</p>
}
else
{
    <Dropzone TItem="TaskModel"
        Items="tasks"
        OnItemDropped="HandleDrop">
        <ItemTemplate Context="task">
            <div class="task-item" style="color:@GetPriorityColor(task.Priority);">
                <div class="main-text">
                    <div>
                        <span style="text-decoration:@(task.IsCompleted ? "line-through" : "none")"><strong>@task.Title</strong> -  @task.DueDate.ToShortDateString()</span>
                    </div>
                    <InputCheckbox @bind-Value="task.IsCompleted" @onchange="() => SaveTasksAsync()" />
                </div>
                <div class="main-buttons">
                    <a class="btn btn-secondary button-task-list" href="/task/@task.Id">Подробнее</a>
                    <a class="btn btn-secondary button-task-list" href="/edit-task/@task.Id">Редактировать</a>
                    <button class="btn btn-secondary button-task-list" @onclick="() => DeleteTask(task.Id)">Удалить</button>
                </div>
            </div>
        </ItemTemplate>
    </Dropzone>
}


@code {
    public static List<TaskModel> tasks = new();

    [Inject] private HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var localData = await JS.InvokeAsync<string>("localStorage.getItem", "tasks");

        if (!string.IsNullOrEmpty(localData) && localData != "[]")
        {
            tasksAll = System.Text.Json.JsonSerializer.Deserialize<List<TaskModel>>(localData);
        }
        else
        {
            var json = await Http.GetStringAsync("sample-data/tasks.json");
            tasksAll = System.Text.Json.JsonSerializer.Deserialize<List<TaskModel>>(json);

            await SaveTasksAsync();
        }

        ApplyFilters();
    }

    public async Task SaveTasksAsync()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(tasksAll);
        await JS.InvokeVoidAsync("localStorage.setItem", "tasks", json);
    }

    private async Task DeleteTask(Guid id)
    {
        var taskToDelete = tasksAll.FirstOrDefault(t => t.Id == id);
        if (taskToDelete != null)
        {
            tasks.Remove(taskToDelete);
            await SaveTasksAsync();
            ApplyFilters();
        }
    }


    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "green",
            TaskPriority.Medium => "goldenrod",
            TaskPriority.High => "red",
            _ => "black"
        };
    }

    // Сортировка-------------------------------------------------------------

    private string currentSort = "default";
    private bool isSortReversed = false;

    private void OnSortChanged(ChangeEventArgs e)
    {
        currentSort = e.Value.ToString();
        ApplySorting();
    }

    private void InvertSortOrder()
    {
        isSortReversed = !isSortReversed;
        ApplySorting();
    }

    private void ApplySorting()
    {
        switch (currentSort)
        {
            case "priority":
                tasks = tasks.OrderBy(t => t.Priority).ToList();
                break;
            case "date":
                tasks = tasks.OrderBy(t => t.DueDate).ToList();
                break;
            case "title":
                tasks = tasks.OrderBy(t => t.Title).ToList();
                break;
            default:
                break;
        }

        if (isSortReversed)
        {
            tasks.Reverse();
        }
    }

    // Фильтр-------------------------------------------------------------

    private string statusFilter = "";
    private string priorityFilter = "";
    private DateTime? dateFilter = null;
    private string searchQuery = "";

    private List<TaskModel> tasksAll = new();

    private void OnStatusChanged(ChangeEventArgs e)
    {
        statusFilter = e.Value?.ToString();
        ApplyFilters();
    }

    private void OnPriorityChanged(ChangeEventArgs e)
    {
        priorityFilter = e.Value?.ToString();
        ApplyFilters();
    }

    private void OnDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var parsedDate))
        {
            dateFilter = parsedDate;
        }
        else
        {
            dateFilter = null;
        }

        ApplyFilters();
    }

    private void OnQuerySubmit()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        IEnumerable<TaskModel> filtered = tasksAll;

        if (!string.IsNullOrEmpty(statusFilter))
        {
            filtered = filtered.Where(t => (string.IsNullOrEmpty(statusFilter) || t.IsCompleted.ToString().ToLower() == statusFilter.ToLower()));
        }

        if (!string.IsNullOrEmpty(priorityFilter))
        {
            filtered = filtered.Where(t => t.Priority.ToString() == priorityFilter);
        }

        if (dateFilter.HasValue)
        {
            filtered = filtered.Where(t => t.DueDate.Date == dateFilter.Value.Date);
        }

        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filtered = filtered.Where(t => t.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
        }

        // filtered = tasksAll
        //     .Where(
        //         t => (string.IsNullOrEmpty(statusFilter) || t.IsCompleted.ToString().ToLower() == statusFilter.ToLower()) &&
        //     (string.IsNullOrEmpty(priorityFilter) || t.Priority.ToString() == priorityFilter) &&
        //     (!dateFilter.HasValue || t.DueDate.Date == dateFilter.Value.Date) &&
        //     (string.IsNullOrWhiteSpace(searchQuery) || t.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        //     )
        // .ToList();

        // foreach (var task in tasksAll)
        // {
        //     Console.WriteLine(task.Title);
        // }

        tasks = filtered.ToList();

        ApplySorting();
    }

    private void ClearFilters()
    {
        statusFilter = "";
        priorityFilter = "";
        dateFilter = null;
        searchQuery = "";
        ApplyFilters();
    }

    // ----------------------------------------------------
    private void HandleDrop(TaskModel droppedTask) // сделать перемещение по индексу
    {
        tasks.Remove(droppedTask);
        tasks.Add(droppedTask);
        SaveTasksAsync();
    }


}
