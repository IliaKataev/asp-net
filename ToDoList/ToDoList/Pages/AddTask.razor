@page "/add-task"
@using ToDoList.Model
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using ToDoList.Services
<h3 class="add-header">AddTask</h3>



<EditForm Model="@newerTask" OnValidSubmit="HandleValidInput" >
    <DataAnnotationsValidator />
    <div id="add-form">
        <div class="task-item">
            <label>Заголовок:</label>
            <InputText @bind-Value="newerTask.Title" class="form-input" />
            <ValidationMessage For="@(() => newerTask.Title)" />
        </div>

        <div class="task-item">
            <label>Срок:</label>
            <InputDate @bind-Value="newerTask.DueDate" class="form-input" />
            <ValidationMessage For="@(() => newerTask.DueDate)" />
        </div>

        <div class="task-item">
            <label>Приоритет:</label>
            <InputSelect @bind-Value="newerTask.Priority" class="form-input">
                @foreach (var p in Enum.GetValues<TaskPriority>())
                {
                    <option value="@p">@p</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newerTask.Priority)" />
        </div>
        <div class="task-item">
            <label>Категория</label>
            <InputSelect @bind-Value="SelectedTagId" class="form-select">
                <option value="">Выберите:</option>
                @foreach (var tag in AllTags)
                {
                    <option value="@tag.Id">@tag.Name</option>
                }
            </InputSelect>
        </div>
        <div class="link-and-button">
            <a class="go-back-link" href="/tasks"></a>
            <button class="button-task-list" type="submit">Сохранить задачу</button>
        </div>
        <button type="button" class="button-task-list" @onclick="ShowTagPopup">Добавить тег</button>
    </div>
    
</EditForm>

@if (showTagPopup)
{
    <div class="modal-fullscreen-overlay">
        <div class="modal-fullscreen-content">
            <h3 class="text-lg-center mb-2">Новый тег</h3>
            <div class="d-flex   flex-column gap-2">
                <input type="color" @bind="newTagColor" class="modal-fullscreen-lg-down h-10 mb-2 cursor-pointer color-picker"/>
                <input type="text" @bind="newTagName" class="border rounded modal-fullscreen-lg-down mb-2 p-1" placeholder="Название" />
            </div>
            

            <div>
                <button class="px-3 py-1 rounded button-task-list bg-black" @onclick="() => showTagPopup = false">Отмена</button>
                <button class="px-3 py-1 rounded button-task-list bg-black" @onclick="AddTag">Добавить</button>
            </div>
        </div>
    </div>
}




@code {
    [Inject]
    private TaskService TaskService { get; set; }

    TaskModel newerTask = new();
    private Guid SelectedTagId;
    private bool showTagPopup = false;
    private string newTagName = "";
    private string newTagColor = "#8d7c55";
    private List<Tag> AllTags => TaskService.AllTags;

    

    //private Tag SelectedTag => AllTags.FirstOrDefault(t => t.Id == SelectedTagId);


    async Task HandleValidInput()
    {
        newerTask.Tag = AllTags.FirstOrDefault(t => t.Id == SelectedTagId);
        TaskService.AddTask(newerTask);

        await TaskService.SaveAsync(JS);

        Navigation.NavigateTo("/tasks");
    }


    private void ShowTagPopup()
    {
        showTagPopup = true;
        newTagColor = "#8d7c55";
        newTagName = "";
    }

    private async Task AddTag()
    {
        if (!string.IsNullOrWhiteSpace(newTagName))
        {
            var newTag = new Tag { Id = Guid.NewGuid(), Name = newTagName.Trim(), Color = newTagColor };
            TaskService.AddTag(newTag);
            SelectedTagId = newTag.Id;

            await TaskService.SaveTagsAsync(JS);

            showTagPopup = false;
        }
    }

   
}
