@page "/add-task"
@using ToDoList.Model
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using ToDoList.Services
<h3 class="add-header">AddTask</h3>

<EditForm Model="@newerTask" OnValidSubmit="HandleValidInput" >
    <DataAnnotationsValidator />
    <div id="add-form">
        <div class="task-item">
            <label>Заголовок:</label>
            <InputText @bind-Value="newerTask.Title" class="form-input" />
            <ValidationMessage For="@(() => newerTask.Title)" />
        </div>

        <div class="task-item">
            <label>Срок:</label>
            <InputDate @bind-Value="newerTask.DueDate" class="form-input" />
            <ValidationMessage For="@(() => newerTask.DueDate)" />
        </div>

        <div class="task-item">
            <label>Приоритет:</label>
            <InputSelect @bind-Value="newerTask.Priority" class="form-input">
                @foreach (var p in Enum.GetValues<TaskPriority>())
                {
                    <option value="@p">@p</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newerTask.Priority)" />
        </div>
        <div class="link-and-button">
            <a class="go-back-link" href="/tasks"></a>
            <button class="button-task-list" type="submit">Сохранить задачу</button>
        </div>
        
    </div>
    
</EditForm>




@code {
    [Inject]
    private TaskService TaskService { get; set; }
    TaskModel newerTask = new();
    async Task HandleValidInput()
    {
        TaskService.AddTask(newerTask);

        TaskService.SaveAsync(JS);

        Navigation.NavigateTo("/tasks");
    }
}
